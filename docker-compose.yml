version: '3.9'

services:
  backend:
    container_name: daps-backend
    build:
      context: backend
    command: ["air", "migrate", "&&", "air", "serve"]
    env_file:
      - backend/.env
    ports:
      - "18001:18001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/daps/backend
      - ./certbot/conf/:/etc/nginx/ssl/
    networks:
      daps:
      database: {}

  asynq-worker:
    container_name: daps-worker
    build:
      context: backend
      dockerfile: Dockerfile
    command: ["air", "worker"]
    env_file:
      - backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/daps/backend
    networks:
      database: {}

  asynq-client:
    container_name: daps-client
    build:
      context: backend
      dockerfile: Dockerfile
    command: ["air", "client"]
    env_file:
      - backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/daps/backend
    networks:
      database: {}

  db:
    container_name: deselflopment-db
    image: mysql:latest
    env_file:
      - backend/.env
    ports:
      - "13306:13306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "db", "-u $$MYSQL_ROOT_USER", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - deselflopment:/var/lib/deselflopment
      - ./scripts/database-initialization.sql:/docker-entrypoint-initdb.d/setup.sql
    networks:
      database: {}

  redis:
    container_name: deselflopment-redis
    image: redis:alpine
    command: [redis-server, --port, "16379"]
    ports:
      - "16379:16379"
    networks:
      database: {}

  frontend:
    container_name: daps-frontend
    build:
      context: frontend
      dockerfile: Dockerfile-local
    env_file:
      - frontend/.env-prod
    command: ["npm", "run", "start:prod"]
    restart: always
    ports:
      - "13001:3000"
    networks:
      daps:
      database: {}
    stdin_open: true

  webserver:
    container_name: deselflopment-nginx
    image: nginx
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d/
      - ./certbot/www:/var/www/certbot/
      - ./certbot/conf/:/etc/nginx/ssl/
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      daps:
    ports:
      - "80:80"
      - "443:443"

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/
      - ./certbot/conf/:/etc/letsencrypt/
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - webserver

volumes:
  deselflopment:

networks:
  database:
    external: true
  daps:
    driver: bridge
